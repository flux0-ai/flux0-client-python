"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from .statuseventdatastatusfield import StatusEventDataStatusField
from openapi.types import BaseModel, Nullable, OptionalNullable, UNSET, UNSET_SENTINEL
from openapi.utils import validate_const
import pydantic
from pydantic import model_serializer
from pydantic.functional_validators import AfterValidator
from typing import Any, Literal
from typing_extensions import Annotated, NotRequired, TypedDict


class StatusEventDataDTOTypedDict(TypedDict):
    status: StatusEventDataStatusField
    r"""Status of the event."""
    type: Literal["status"]
    acknowledged_offset: NotRequired[Nullable[int]]
    data: NotRequired[Nullable[Any]]


class StatusEventDataDTO(BaseModel):
    status: StatusEventDataStatusField
    r"""Status of the event."""

    TYPE: Annotated[
        Annotated[Literal["status"], AfterValidator(validate_const("status"))],
        pydantic.Field(alias="type"),
    ] = "status"

    acknowledged_offset: OptionalNullable[int] = UNSET

    data: OptionalNullable[Any] = UNSET

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = ["acknowledged_offset", "data"]
        nullable_fields = ["acknowledged_offset", "data"]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in self.model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m
