"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from .eventsourcedto import EventSourceDTO
from .eventtypedto import EventTypeDTO
from openapi.types import BaseModel, Nullable, OptionalNullable, UNSET, UNSET_SENTINEL
from pydantic import model_serializer
from typing_extensions import NotRequired, TypedDict


class EventCreationParamsDTOTypedDict(TypedDict):
    r"""Parameters for creating a new event within a session."""

    type: EventTypeDTO
    r"""Type of event that occurred within a session.

    Represents different types of interactions that can occur within a conversation.
    """
    source: EventSourceDTO
    r"""Source of the event within a session.

    Identifies who or what generated the event.
    """
    content: NotRequired[Nullable[str]]


class EventCreationParamsDTO(BaseModel):
    r"""Parameters for creating a new event within a session."""

    type: EventTypeDTO
    r"""Type of event that occurred within a session.

    Represents different types of interactions that can occur within a conversation.
    """

    source: EventSourceDTO
    r"""Source of the event within a session.

    Identifies who or what generated the event.
    """

    content: OptionalNullable[str] = UNSET

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = ["content"]
        nullable_fields = ["content"]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in self.model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m
